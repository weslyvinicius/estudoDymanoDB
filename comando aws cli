
# AWS configure

$ aws configure

AWS Access Key ID [None]: local
AWS Secret Access Key [None]: local
Default region name [None]: sa-east-1
Default output format [None]: json


Criando uma tablela no dynamo

#por consumo

$ aws dynamodb create-table \
    --table-name dev-users \
    --attribute-definitions AttributeName=userId,AttributeType=S \
    --key-schema AttributeName=userId,KeyType=HASH \
    --billing-mode PAY_PER_REQUEST \
    --endpoint-url http://localhost:8042

#por requisicao
$ aws dynamodb create-table \
    --table-name dev-users \
    --attribute-definitions AttributeName=userId,AttributeType=S \
    --key-schema AttributeName=userId,KeyType=HASH \
    --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
    --endpoint-url http://localhost:8042

$lista tabelas criadas
$ aws dynamodb list-tables --endpoint-url http://localhost:8042    

#find tabela
$ aws dynamodb scan  --table-name dev-users   

#inserir item
$ aws dynamodb put-item \
    --table-name dev-users \
    --item '{ "userId": {"S": "Teste1"} }' \
    --return-consumed-capacity TOTAL \
    --endpoint-url http://localhost:8042 

    Scalar Type = {
    * String,
    * Number,
      Boolean,
    * Bynary, 
      null
}

*index e key sao Scalar Type porem suportao apenas.

String = Não pode ser null 
        Tipo Texto formato UTF-8
        "Maria", "José"

Number = numeros (positivo - negetivos)

Boolean = true/false

Binary = Não pode ser null
         Dados binarios (blob)

*Set Type = conjunto de valores do tipo Scalar Type.
*seria da tipo o arrylist<> do java.

Document Type =  Estruturas aninhadas e complexas
                 Maps e List



*********************** RCU **************************
1 leitura por segundo - Strongly
2 leitura por segundo - Eventually
4kb por leitura

Strongly   = 4kb x3 = 12kb/seg
Eventually = 4kb x3 = 12kb/ps*2 = 24kb/seg


ex: Em um arquivo de 0.5kb
Strongly     --> 0.5kb / 4k = 0.125               = 1 RCU  *sempre arredondando para cima.
Eventually   --> 0.5kb / 4k =( 0.125 /2) = 0.0625 = 1 RCU  *sempre arredondando para cima.


ex: Em um arquivo de 25kb
Strongly     --> 25kb / 4k = 6.25                = 7 RCU  *sempre arredondando para cima.
Eventually   --> 25kb / 4k =( 6.25 /2) = 3.125   = 4 RCU  *sempre arredondando para cima.


 
*********************** WCU **************************
1 - gravacao por segundo
1 kb por gravacao

1k x 3 = kb/seg


ex: Para gravaçao um arquivo de 0.5kb

0.5kb / 1k = 0.5 = 1 WCU   *sempre arredondando para cima.

ex: Para gravaçao um arquivo de 25kb

25kb / 1k  = 25  = 25 WCU   *sempre arredondando para cima.


###################### Escabilide Das Capacidade RCU/WCU #####################

para cima sempre..

para baixa 4x por dia..


*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* Create Table *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*
$ aws dynamodb create-table \
  --table-name completude \
  --attribute-definitions \
     AttributeName=clientId,AttributeType=S \
     AttributeName=contextId,AttributeType=S \
  --key-schema AttributeName=clientId,KeyType=HASH AttributeName=contextId,KeyType=RANGE \
  --provisioned-throughput ReadCapacityUnits=1,WriteCapacityUnits=1 \
  --endpoint-url http://localhost:8042


*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* Delete Table *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*
$ aws dynamodb delete-table \
  --table-name completude \
  --endpoint-url http://localhost:8042


*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* List Tables *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*

$ aws dynamodb list-tables \
  --endpoint-url http://localhost:8042    

*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* Insert Tables *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*
$ aws dynamodb put-item \
  --table-name completude  \
  --item \
        '{ 
            "clientId": {
                "S": "Thor"
            },
            "contextId": {
                "S": "mavel"
            }
        }' \
  --return-consumed-capacity TOTAL \
  --endpoint-url http://localhost:8042 

*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* Scan Table *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*
$ aws dynamodb scan \
  --table-name completude \
  --endpoint-url http://localhost:8042   


*#*#*#*#*#*#*#*#*#*##**#*#*#*##*#* Find Table *#*#*#*#*#*#*#*#*#*##**#*#*#*##*#*
aws dynamodb get-item --consistent-read \
    --table-name completude2 \
    --key '{ "idCliente": {"S": "1"}, "statusTipoId": {"S": "ATIVO#EMAIL_10"}}' \
    --endpoint-url http://localhost:8042 


aws dynamodb query \
    --table-name completude2 \
    --key-condition-expression "idCliente = :pk and begins_with(statusTipoId, :sk)" \
    --expression-attribute-values  '{":pk":{"S":"1"}, ":sk":{"S":"ATIVO#EMAIL_10"}}' \
    --endpoint-url http://localhost:8042 

    aws dynamodb query \
    --table-name completude2 \
    --key-condition-expression "idCliente = :pk and begins_with(tipoId, :sk)" \
    --expression-attribute-values  '{":pk":{"S":"2"}, ":sk":{"S":"EMAIL_20"}}' \
    --endpoint-url http://localhost:8042 




